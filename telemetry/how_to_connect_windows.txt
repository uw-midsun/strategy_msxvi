How to connect to telemetry on Windows:

Why is this complicated? The problem is that when we plug in the antenna, WSL cannot access the ports, only your native machine can. We must therefore run the telemetry files from Powershell. (An alternative solution we could try in the future is to create a Docker instance, but that's quite complicated so we'll go with this hacky, simpler method.)

Lines prefixed with "PS>" are Powershell commands. Lines prefixed with "PSQL>" are Postgres commands. Lines prefixed with "WSL>" are commands to be run in WSL Ubuntu Bash. We assume here that "py" is used to run python, but this may vary based on your installation; also try "python" and "python3".

1. Plug in the antenna.
2. Press the Windows key, type "Device Manager", and search for "Ports (COM & LPT)". You should see "USB Serial Port (COM3)", or something similar, ex. COM4 or COM7. Note this down. Whereas Linux and Mac will use a port like "/dev/tty.usbserial-D30DPX93" in the telemetry files when running serial.Serial(), Windows will use "COM#", where # is the number on your machine.
3. Open Powershell. Enter your WSL filesystem from Powershell by running the following. You may need to open WSL in another terminal window.
    PS> cd \\wsl.localhost\Ubuntu-<YOUR VERSION NUMBER>\home\
4. Navigate to the /telemetry folder of the repo.
5. We will need to manually install pip in this directory specifically. Run the following:
    PS> py -m ensurepip
6. Ensure the lines "telemetry/Lib" and "telemetry/Scripts" are in the .gitignore file in the root folder of the repo.
7. We will test that above steps have been completed correctly. Edit the file telemetry/tests/XBee_RX.py such that the port field in serial.Serial is "COM#", either through your Windows system or WSL, then return to Powershell and run the following line. If any dependency errors show up, install them using "pip install ___". Note "serial" is installed via "pip install pyserial". Pip installation may take some time and look like it has frozen, be patient (Or press a key on your keyboard every once in a while? For some reason this sometimes helps?).
    PS> py tests/XBee_RX.py
8. You should see a long output of "Received: b'...'" streaming down the terminal screen. Press CTRL+C to stop the output.
9. Also try running the following. Again, install packages with pip as needed, and input "COM#" when prompted for a port.
    PS> py hw_test.py
10. The above should also work and output a long string of "Decoded Data: {...}" streaming down the terminal screen. Press CTRL+C to stop the output.
11. I hope Postgres has already been installed in your WSL. If not, look through Eric G's documentation on connecting to telemetry via Mac or Linux, and God save your soul. Once Postgres is installed, use WSL to open the terminal runner, such as by typing the following. Note the username profile you are using (ex. "postgres" or "yourusername").
    WSL> psql
12. Run the following in the Postgres CLI:
    PSQL> CREATE DATABASE telemetry;
    PSQL> GRANT ALL PRIVILEGES ON DATABASE telemetry TO yourusername;
13. Exit Postgres by typing CTRL+D, then type:
    WSL> psql -U yourusername -d telemetry
14. Run the following in the Postgres CLI:
    PSQL> CREATE TABLE IF NOT EXISTS telemetry ( id SERIAL PRIMARY KEY, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, message_name VARCHAR(50), value FLOAT );
    PSQL> GRANT ALL PRIVILEGES ON TABLE telemtry TO yourusername;
    PSQL> GRANT USAGE, SELECT ON SEQUENCE telemetry_id_seq TO yourusername;
15. Type CTRL+D to exit the Postgres CLI. Type the following and note down the version of Postgres:
    WSL> psql --version
16. Since Postgres is running in WSL, we need to tell Postgres to accept connection requests from the outside world so that it can be queried by Grafana. To this end we must edit postgresql.conf and pg_hba.conf, which are often stored in the same WSL folder, likely either /etc/postgresql/14/main/ or /var/lib/postgresql/data/. Use WSL to cd to the folder containing these two files.
17. Open postgresql.conf using sudo and navigate to the line labelled listen_addresses = '...', uncomment it and change it to listen_addresses = '*'. For example, use vim or nano to edit the file.
18. Similarly, use sudo to add the line "host    all    all    0.0.0.0/0    md5" to the bottom of pg_hba.conf.
19. Restart Postgres by running:
    WSL> sudo service PostgreSQL restart
20. In Powershell, run the following and note down the IP address of WSL (192.168.x.x):
    PS> wsl hostname -I
21. Ensure Grafana is installed: https://grafana.com/grafana/download?edition=enterprise&platform=windows.
22. Navigate to localhost:3000. A Grafana login screen should show up. Input "admin" as both username and password.
23. Change your password as prompted.
24. On the left-side menu, select Connections, search for PostgreSQL, and press "Add New Data Source".
25. Input the IP address of WSL as the host URL, "telemetry" as the database name, your Postgres username and password in Authentication, set TLS/SSL Mode to Disable, select your version of Postgres, then press Save & Test. It should connect.
26. On the left-side menu, select Dashboards, Add New Dashboard, then Add visualization. Select the connection you just created. It should display "No data"; this is normal.
27. In the query builder at the bottom of the screen, change the mode to "Code". Input the following:
    SELECT
      "timestamp" AS time,
      "value"
    FROM
      telemetry
    WHERE
      "message_name" = 'voltage'
   ORDER BY
      "timestamp" ASC
28. Grafana is now all set up. In the repo, create (or edit, if it already exists) a .env file such that it has:
    DB_HOST=<WSL IP Address Here>
    DB_PORT=5432
    DB_USER=<yourusername>
    DB_PASSWORD=<yourpassword>
    DB_NAME=telemetry
29. Return to Powershell and run the following, pip installing anything that is needed. If it works, a continuous stream of text similar to the output of hw_test.py should be outputted to the terminal screen.
    PS> py main.py
30. Return to Grafana. Press "Run Query", then "Refresh". You may need to change the time range. The data should be displayed. Congratulations! Change the query builder as needed using the "message_name" part of the query. See available queries in telemetry/README.